版本：V0.1
创建者：ぼつち
创建时间：2024年9月

-------------    分割线        ------------------------

1、字符串命名可用str简写

2、异常处理
	如果该异常是该类能够处理，有其他补救措施，则捕获，打印日志并处理或者入死信队列交由B端处理
	如果该异常是该类不能处理，则抛出至调用方，不打印日志

3、类命名
	优先使用包路径表示类含义，避免类名重复可在类名后面加上包路径最后一个词。
	或者减少一层包名，将包名的词加到类上面，如×××.impl中的Msg类文件名改为×××.MsgImpl
	
4、注释：对类或者方法的主要注释均采用块级注释，对接口层、持久化层、实现层均要标注作者和方法返回值
		对方法的注释要表明传入参数类型以及返回结果
		对变量的注释使用行级注释
5、请求调用层级关系
	http业务/RESTful请求  -> controller -> service -> implment  -> 数据库/缓存/文件图床等
	                		     			 |                                                                                     
	                                      			   ->   缓存/消息队列                                                                                                                                                                                                                                工具类
	                                                                       
6、实体类实例化命名
       类名取类首字母大写的驼峰;
       实体类字段命名不省略系统属性，且开启Mybatis-Plus驼峰命名法	 
	
7、标点符号规范
	Java类、YML等配置文件、前端vue和ts等，逗号（,）、句号（.）、分号（;）、感叹号（!）一律使用英文标点，其余视实际情况而定. 
	                                                                    
8、SL4J日志打印
	trace —— 用于记录非常详细的程序执行路径。适合在方法内部或非常细粒度的地方使用，通常用于调试最细节的步骤，不涉及打印变量值，仅表明程序执行到此。

	debug —— 用于调试，既表明程序执行到某个步骤，又用于打印一些关键的变量值

	info —— 用于打印常规的有用信息，标记程序的正常运行状态

	warn —— 当程序遇到问题，但问题不会影响程序的正常执行，且可能有补救措施或需要注意时使用。例如，某些操作可能失败，但不会导致系统崩溃。

	error —— 当程序遇到严重问题且影响业务流程执行时使用。